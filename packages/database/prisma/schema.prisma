generator erd {
  provider = "prisma-erd-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String    @id @default(uuid())
  userId            String
  type              String
  provider          String    @unique
  providerAccountId String    @unique
  refresh_token     String?
  access_token      String?
  expires_at        DateTime?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Pet           Pet[]
}

model VerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
}

enum Gender {
  MALE
  FEMALE
}

enum PetKind {
  DOG
  CAT
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
}

model Pet {
  id                  String               @id @default(uuid())
  name                String
  kind                PetKind
  gender              Gender
  size                PetSize
  birthday            DateTime
  gotchaDay           DateTime?
  avatar              String?
  createdAt           DateTime             @default(now())
  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId             String
  breeds              Breed[]
  petFood             PetFood[]
  petFavoriteTreats   PetTreat[]
  petFavoriteFlavor   PetFlavor[]
  petSensitivies      PetSensitivies[]
  needGrainFree       Boolean?
  needWeightControl   Boolean?
  PetWellnessConcerns PetWellnessConcern[]
  PetVaccineHistory   PetVaccineHistory[]
}

model Breed {
  id   String @id @default(uuid())
  name String
  Pets Pet[]
}

enum FoodType {
  WET
  DRY
  OTHER
}

model PetFood {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  pet           Pet          @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId         String
  foodProduct   FoodProduct  @relation(fields: [foodProductId], references: [id], onDelete: Cascade)
  foodProductId String
  foodType      FoodType
  mealDetails   MealDetail[]
  note          String?
}

model MealTime {
  id          String       @id @default(uuid())
  label       String
  startTime   DateTime
  endTime     DateTime
  description String?
  mealDetails MealDetail[]
}

model MealServingSize {
  id          String       @id @default(uuid())
  label       String
  description String?
  mealDetails MealDetail[]
}

model MealDetail {
  id               String            @id @default(uuid())
  createdAt        DateTime          @default(now())
  petFood          PetFood           @relation(fields: [petFoodId], references: [id], onDelete: Cascade)
  petFoodId        String
  mealTimes        MealTime[]
  quantity         Int
  mealServingSizes MealServingSize[]
}

model FoodBrand {
  id          String        @id @default(uuid())
  name        String
  foodProduct FoodProduct[]
}

model FoodProduct {
  id          String     @id @default(uuid())
  name        String
  foodBrand   FoodBrand? @relation(fields: [foodBrandId], references: [id])
  foodBrandId String?
  petFood     PetFood[]
}

model PetTreat {
  id          String  @id @default(uuid())
  img         String
  name        String
  description String?
  Pet         Pet[]
}

model PetFlavor {
  id          String  @id @default(uuid())
  img         String
  name        String
  description String?
  Pet         Pet[]
}

model PetSensitivies {
  id          String  @id @default(uuid())
  img         String
  name        String
  description String?
  Pet         Pet[]
}

model PetWellnessConcern {
  id          String  @id @default(uuid())
  name        String
  description String?
  Pet         Pet[]
}

model Vaccine {
  id                String              @id @default(uuid())
  name              String
  petVaccineHistory PetVaccineHistory[]
}

model PetVaccineHistory {
  id                      String   @id @default(uuid())
  createdAt               DateTime @default(now())
  pet                     Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId                   String
  vaccine                 Vaccine? @relation(fields: [vaccineId], references: [id], onDelete: Cascade)
  vaccineId               String?
  name                    String?
  lastVaccinationDate     DateTime
  nextVaccinationDate     DateTime
  previousVaccinationDate DateTime
  note                    String?
  photo                   String[]
}
